const { Web3 } = require('web3');
const web3 = new Web3(Web3.givenProvider || "http://127.0.0.1:7545");
const contractABI = [
    [
        {
            "inputs": [
                {
                    "internalType": "address payable",
                    "name": "_seller",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_totalAmount",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "buy",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "isWithdrawn",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "seller",
            "outputs": [
                {
                    "internalType": "address payable",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalAmount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ]
];

const contractBytecode = '608060405234801561000f575f80fd5b5060405161099d38038061099d8339818101604052810190610031919061013b565b815f806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550670de0b6b3a76400008161008491906101a6565b6001819055505f60025f6101000a81548160ff02191690831515021790555050506101e7565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100d7826100ae565b9050919050565b6100e7816100cd565b81146100f1575f80fd5b50565b5f81519050610102816100de565b92915050565b5f819050919050565b61011a81610108565b8114610124575f80fd5b50565b5f8151905061013581610111565b92915050565b5f8060408385031215610151576101506100aa565b5b5f61015e858286016100f4565b925050602061016f85828601610127565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6101b082610108565b91506101bb83610108565b92508282026101c981610108565b915082820484148315176101e0576101df610179565b5b5092915050565b6107a9806101f45f395ff3fe608060405260043610610049575f3560e01c806308551a531461004d5780631a39d8ef146100775780633ccfd60b146100a157806344aa5700146100b7578063a6f2ae3a146100e1575b5f80fd5b348015610058575f80fd5b506100616100eb565b60405161006e9190610446565b60405180910390f35b348015610082575f80fd5b5061008b61010e565b6040516100989190610477565b60405180910390f35b3480156100ac575f80fd5b506100b5610114565b005b3480156100c2575f80fd5b506100cb610254565b6040516100d891906104aa565b60405180910390f35b6100e9610266565b005b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019890610543565b60405180910390fd5b60025f9054906101000a900460ff166101ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e6906105d1565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc4790811502906040515f60405180830381858888f19350505050158015610251573d5f803e3d5ffd5b50565b60025f9054906101000a900460ff1681565b60025f9054906101000a900460ff16156102b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ac9061065f565b60405180910390fd5b60015434146102f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f0906106c7565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037d90610755565b60405180910390fd5b5f8054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60015490811502906040515f60405180830381858888f193505050501580156103ea573d5f803e3d5ffd5b50600160025f6101000a81548160ff021916908315150217905550565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61043082610407565b9050919050565b61044081610426565b82525050565b5f6020820190506104595f830184610437565b92915050565b5f819050919050565b6104718161045f565b82525050565b5f60208201905061048a5f830184610468565b92915050565b5f8115159050919050565b6104a481610490565b82525050565b5f6020820190506104bd5f83018461049b565b92915050565b5f82825260208201905092915050565b7f4f6e6c79207468652073656c6c65722063616e2077697468647261772066756e5f8201527f6473000000000000000000000000000000000000000000000000000000000000602082015250565b5f61052d6022836104c3565b9150610538826104d3565b604082019050919050565b5f6020820190508181035f83015261055a81610521565b9050919050565b7f46756e64732068617665206e6f74206265656e2077697468647261776e2079655f8201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b5f6105bb6021836104c3565b91506105c682610561565b604082019050919050565b5f6020820190508181035f8301526105e8816105af565b9050919050565b7f46756e6473206861766520616c7265616479206265656e2077697468647261775f8201527f6e00000000000000000000000000000000000000000000000000000000000000602082015250565b5f6106496021836104c3565b9150610654826105ef565b604082019050919050565b5f6020820190508181035f8301526106768161063d565b9050919050565b7f496e636f727265637420616d6f756e742073656e7400000000000000000000005f82015250565b5f6106b16015836104c3565b91506106bc8261067d565b602082019050919050565b5f6020820190508181035f8301526106de816106a5565b9050919050565b7f53656c6c65722063616e6e6f7420627579207468656972206f776e2070726f645f8201527f7563740000000000000000000000000000000000000000000000000000000000602082015250565b5f61073f6023836104c3565b915061074a826106e5565b604082019050919050565b5f6020820190508181035f83015261076c81610733565b905091905056fea264697066735822122017868e4c1a99aa18bb23cf619494fd59bfe2a9548a6d271b89582879157d27e664736f6c63430008190033'; // Contract bytecode here
const buyerAddress = '0x0c17c9b7D8A9a18Ab2B2c8597CA570fc1E25A6c8'; // Buyer's address here
const totalAmountInDollars = 100; // Total amount in dollars here


const TransactionContract = new web3.eth.Contract(contractABI);

const Blockchain = {
    deployContract: async (username,total) => {
        try {
            const block =false;
            const username =username;
            totalAmountInDollars=total;
            console.log('contract username : ',username,'total amount in dolars : ', total);
            const accounts = await web3.eth.getAccounts();
            const deployerAddress = accounts[0]; // Use the first account as the deployer

            const newContractInstance = await TransactionContract.deploy({
                data: contractBytecode,
                arguments: [buyerAddress, totalAmountInDollars]
            }).send({
                from: deployerAddress,
                gas: 5000000,
                gasPrice: '20000000000'
            });

            console.log('Contract deployed at address:', newContractInstance.options.address);

            // No need to invoke the `buy()` method separately if it's already specified during deployment

            console.log('Transaction successful. Receipt:', newContractInstance.transactionHash);
            block =true;
            return block
        } catch (error) {
            console.error('Error occurred:', error);
            return { error: true };
        }
    }
};
